name: Build NixOS Configuration

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run every day at 6 AM UTC to catch any upstream breakages
    - cron: '0 6 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
        

    - name: Check flake
      run: nix flake check --no-build
      
    - name: Build configuration (dry-run)
      run: |
        # Create a temporary flake.nix with dummy values for testing
        cp flake.nix flake.nix.backup
        sed -i 's/systemUsername = "[^"]*"/systemUsername = "testuser"/' flake.nix
        sed -i 's/systemHostname = "[^"]*"/systemHostname = "testhost"/' flake.nix
        
        # Build the configuration without actually installing it
        nix build .#nixosConfigurations.testhost.config.system.build.toplevel
        
        # Restore original flake.nix
        mv flake.nix.backup flake.nix
        
    - name: Check for common issues
      run: |
        echo "‚úÖ Configuration builds successfully!"
        echo "Checking for potential issues..."
        
        # Check if hardware-configuration.nix is accidentally included
        if [ -f "hardware-configuration.nix" ]; then
          echo "‚ö†Ô∏è  Warning: hardware-configuration.nix found - this should be user-specific"
        fi
        
        # Verify flake inputs are up to date (informational)
        echo "üì¶ Current flake inputs:"
        nix flake metadata --json | jq -r '.locks.nodes | to_entries[] | select(.key != "root") | "\(.key): \(.value.locked.rev // .value.locked.ref // "unknown")"'